plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id "com.matthewprenger.cursegradle" version "${cursegradle_version}"
	id 'com.modrinth.minotaur' version "${minotaur_version}"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {}

fabricApi {
	configureDataGeneration()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			from components.java
		}
	}

	repositories {}
}

curseforge {

	apiKey = project.findProperty('curseforge_apikey') ?: '0'

	project {

		id = curseforge_project_id
		releaseType = mod_release_type

		changelog = file("changelog.txt")

		addGameVersion "${minecraft_version}"
		addGameVersion "Java 17"
		addGameVersion "Fabric"

		mainArtifact(jar) {
			displayName = "[Fabric ${rootProject.minecraft_version}] v${rootProject.mod_version}"
		}
	}
}

tasks.modrinth.configure({
	group = 'upload'
})

modrinth {

	token = project.findProperty('modrinth_apikey') ?: '0'

	projectId = modrinth_project_id
	versionType = mod_release_type.toUpperCase()

	changelog = file('changelog.txt').text

	versionNumber = "fabric-${minecraft_version}-${mod_version}"
	versionName = "CCore ${mod_version}"
	uploadFile = jar

	gameVersions = [minecraft_version]
	loaders = ['fabric']
}
tasks.modrinth.dependsOn(build)

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
